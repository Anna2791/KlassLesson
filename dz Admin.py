# Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и могут
# добавлять или удалять пользователя из системы.
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе:
# ID, имя и уровень доступа ('user' для обычных сотрудников).
#
# 2.Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы add_user и remove_user,
# которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
#
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).
class User():
    def __init__(self,id, name, user):
        self.id = id
        self.name = name
        self.user = user
class Admin(User):
    def __init__(self, id, name, user, admin):
        super().__init__(id, name, user)
        self.admin = admin
        self.user = []
    def add_user(self,id, name, user):
        self.user.append({'id','name','user'})
        print(f'Пользователь {id} {name} {user} добавлен в систему')


    def remove_user(self):
        for user in self.user:
            del self.user[user]
            print(f'Пользователь{id} {name} {user} удален из системы')

user1 = User(122, "Борис", 'посетитель')
admin1 = Admin(555, "Гога", 'сотрудник','админ')
admin1.add_user(56, 'Марина', 'посетительница')